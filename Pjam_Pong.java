
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nathan
 */
public class Pjam_Pong extends javax.swing.JFrame {
    boolean exit = false;
    //booleans that indicate how the ball is moving
    boolean ballGoingDown;
    boolean ballGoingRight;
    
    //adjustable speed value of ball (used for starting and stopping the game)
    int speed = 0;
    //adjustable x and y coordinate for pong ball
    //starts in the middle of the screen
    int x = 0;
    int y = 0;
    
    int xBorder;
    int yBorder;
    
    int paddle1X = 0;
    int paddle1Y = 0;
    
    int paddle2X = 0;
    int paddle2Y = 0;
    
    /**
     * Creates new form Pjam_Pong along with basic setup of the frame
     */
    public Pjam_Pong() {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
        this.setTitle("Pong Game 1.0");
        this.setPreferredSize(new Dimension(1000, 800));
        pongScreen.setPreferredSize(new Dimension(500, 450));
        //Location of screen = (225, 150)
        //Left = 225, top = 150
        //right = 225 + 500
        //bottom = 150 + 450
        pongScreen.setLocation(225, 150);
        pongScreen.setBackground(Color.BLACK);
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        startClock();
        
        //set panel location to middle of screen
        x = pongScreen.getWidth()/2;
        y = pongScreen.getHeight()/2;
        yBorder = pongScreen.getHeight()-15;
        System.out.println(yBorder);
        System.out.println(pongScreen.getX() + " " + pongScreen.getY());
        
        
        //start game with random direction
        randomDirection();
        moveBall();
        
        //set paddles to initial locations
        
    }
    
    //Paint method that draws a filled oval

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockLabel = new java.awt.Label();
        pongScreen = new javax.swing.JPanel() {
            @Override
            public void paintComponent(Graphics g) {
                super.paintComponent(g);
                //Oval for pong ball right in the middle of the screen at first
                g.setColor(Color.WHITE);
                g.fillOval(x, y, 15, 15);
            }
        };
        startText = new java.awt.Label();
        pongTitle = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.white);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        clockLabel.setBackground(java.awt.Color.white);
        clockLabel.setText("clock text");
        getContentPane().add(clockLabel);
        clockLabel.setBounds(730, 0, 241, 47);

        pongScreen.setBackground(java.awt.Color.black);
        pongScreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pongScreenMouseClicked(evt);
            }
        });
        pongScreen.setLayout(null);

        startText.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        startText.setForeground(java.awt.Color.white);
        startText.setText("Press Spacebar to Start Game");
        pongScreen.add(startText);
        startText.setBounds(170, 140, 180, 80);

        getContentPane().add(pongScreen);
        pongScreen.setBounds(225, 150, 540, 480);

        pongTitle.setAlignment(java.awt.Label.CENTER);
        pongTitle.setBackground(java.awt.Color.white);
        pongTitle.setFont(new java.awt.Font("Bernard MT Condensed", 3, 48)); // NOI18N
        pongTitle.setForeground(java.awt.Color.pink);
        pongTitle.setText("Pong");
        getContentPane().add(pongTitle);
        pongTitle.setBounds(30, 30, 190, 90);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pongScreenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pongScreenMouseClicked
        if (ballGoingRight)
            ballGoingRight = false;
        else
            ballGoingRight = true;
    }//GEN-LAST:event_pongScreenMouseClicked

    //Start game by pressing spacebar when ball is not moving (speed = 0)
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        System.out.println(evt.getKeyChar());
        if (evt.getKeyChar() == ' ') {
            speed = 2;
            startText.setText("");
        }
    }//GEN-LAST:event_formKeyPressed

    private void randomDirection() {
        int testX = (int) (Math.random() * 2) + 1;
        int testY = (int) (Math.random() * 2) + 1;
        System.out.println(testX);
        System.out.println(testY);
        if (testX == 1)
            ballGoingDown = false;
        else
            ballGoingDown = true;
        if (testY == 1)
            ballGoingRight = false;
        else
            ballGoingRight = true;
    }
    
    
    
    //Make the pong ball move automatically
    //Uses same idea as clock method
    private void moveBall() {
        Timer pongTimer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                repaint();
                //ball behavior
                if (ballGoingRight)
                    x += speed;
                else
                    x-= speed;
                //if the ball is heading downwards
                if (ballGoingDown)
                    y += speed;
                else
                    y -= speed;
                //set "borders" to tell ball to bounce up and down (+15 for fine tuning probably due to borders)
                if (y >= yBorder) {
                    ballGoingDown = false;
                }
                if (y <= 0) {
                    ballGoingDown = true;
                }
                repaint();
            }
        });
        pongTimer.start();
    }
    
    
    private void startClock() {
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                String dateTime = new Date().toString();
                
                clockLabel.setText(dateTime);
                
            }
        });
        timer.start();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pjam_Pong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label clockLabel;
    private javax.swing.JPanel pongScreen;
    private java.awt.Label pongTitle;
    private java.awt.Label startText;
    // End of variables declaration//GEN-END:variables
}


