
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nathan
 */
public class Pjam_Pong extends javax.swing.JFrame {
    boolean endGame = false;
    //booleans that indicate how the ball is moving
    boolean ballGoingDown;
    boolean ballGoingRight;
    
    //adjustable speed value of ball (used for starting and stopping the game)
    int ballSpeed = 0;
    int paddleSpeed = 3;
    //adjustable x and y coordinate for pong ball
    //starts in the middle of the screen
    int ballx = 0;
    int bally = 0;
    
    //Border of panel used within pong
    int xBorder;
    int yBorder;
    
    
    //Paddle coordinates along with some other setup
    int paddle1X = 0;
    int paddle1Y = 0;
    
    int paddle2X = 0;
    int paddle2Y = 0;
    
    PaddleDir p1Paddle;
    PaddleDir p2Paddle;
    
    int p1Score = 0;
    int p2Score = 0;
    
    
    /**
     * Creates new form Pjam_Pong along with basic setup of the frame
     */
    public Pjam_Pong() {
        initComponents();
        
        //Set up frame to look prettier
        this.getContentPane().setBackground(Color.WHITE);
        this.setTitle("Pong Game 1.0");
        this.setPreferredSize(new Dimension(1000, 800));
        
        //set up pong screen in middle
        pongScreen.setPreferredSize(new Dimension(710, 480));
        pongScreen.setLocation(150, 160);
        pongScreen.setBackground(Color.BLACK);
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        
        //method to start clock in top right corner of frame
        startClock();
        
        //set panel location to middle of screen
        ballx = pongScreen.getWidth()/2;
        bally = pongScreen.getHeight()/2;
        
        //Set border of screen for ball to bounce off
        xBorder = pongScreen.getWidth() - 15;
        yBorder = pongScreen.getHeight()-15;
        

        //start game with random direction
        randomDirection();
        moveBall();
        
        //set paddles to initial locations
        //Paddle 1
        paddle1X = pongScreen.getX()-100;
        paddle1Y = pongScreen.getHeight() / 2 - 30;
        
        //Paddle 2
        paddle2X = pongScreen.getWidth()-60;
        paddle2Y = pongScreen.getHeight() / 2 - 30;
        
        //Set text of scores to each player
        player1Score.setText("Player 1 Score");    //player 1 score
        player2Score.setText("Player 2 Score");    //player 2 score
        score1.setText(p1Score + "");
        score2.setText(p2Score + "");
        
        

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockLabel = new java.awt.Label();
        score1 = new java.awt.Label();
        score2 = new javax.swing.JLabel();
        pongScreen = new javax.swing.JPanel() {
            @Override
            public void paintComponent(Graphics g) {
                super.paintComponent(g);
                //Oval for pong ball right in the middle of the screen at first
                g.setColor(Color.WHITE);
                g.fillOval(ballx, bally, 15, 15);

                //Paddle for player 1 set on left side
                g.setColor(Color.RED);
                g.fillRect(paddle1X, paddle1Y, 15, 75);

                //Paddle for player 2 set on right side
                g.setColor(Color.BLUE);
                g.fillRect(paddle2X, paddle2Y, 15, 75);
            }
        };
        pongTitle = new java.awt.Label();
        startText = new java.awt.Label();
        player1Score = new java.awt.Label();
        player2Score = new java.awt.Label();
        endButton = new javax.swing.JButton();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.white);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(null);

        clockLabel.setBackground(java.awt.Color.white);
        clockLabel.setText("clock text");
        getContentPane().add(clockLabel);
        clockLabel.setBounds(730, 0, 241, 47);

        score1.setBackground(java.awt.Color.white);
        score1.setFont(new java.awt.Font("Century Schoolbook", 1, 18)); // NOI18N
        score1.setForeground(java.awt.Color.red);
        score1.setText("label1");
        getContentPane().add(score1);
        score1.setBounds(30, 230, 80, 40);

        score2.setBackground(java.awt.Color.white);
        score2.setFont(new java.awt.Font("Century Schoolbook", 1, 18)); // NOI18N
        score2.setForeground(java.awt.Color.blue);
        score2.setText("score");
        getContentPane().add(score2);
        score2.setBounds(890, 240, 80, 40);

        pongScreen.setBackground(java.awt.Color.black);
        pongScreen.setPreferredSize(new java.awt.Dimension(650, 450));
        pongScreen.setLayout(null);
        getContentPane().add(pongScreen);
        pongScreen.setBounds(150, 160, 710, 480);

        pongTitle.setAlignment(java.awt.Label.CENTER);
        pongTitle.setBackground(java.awt.Color.white);
        pongTitle.setFont(new java.awt.Font("Bernard MT Condensed", 3, 48)); // NOI18N
        pongTitle.setForeground(java.awt.Color.pink);
        pongTitle.setText("Pong");
        getContentPane().add(pongTitle);
        pongTitle.setBounds(30, 30, 190, 90);

        startText.setAlignment(java.awt.Label.CENTER);
        startText.setBackground(java.awt.Color.white);
        startText.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        startText.setText("Press 'Spacebar' to Start the Game");
        getContentPane().add(startText);
        startText.setBounds(360, 70, 340, 80);

        player1Score.setAlignment(java.awt.Label.CENTER);
        player1Score.setBackground(java.awt.Color.white);
        player1Score.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        player1Score.setForeground(java.awt.Color.red);
        player1Score.setText("Player 1 Score:");
        getContentPane().add(player1Score);
        player1Score.setBounds(0, 160, 150, 110);

        player2Score.setAlignment(java.awt.Label.CENTER);
        player2Score.setBackground(java.awt.Color.white);
        player2Score.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        player2Score.setForeground(java.awt.Color.blue);
        player2Score.setText("Player 2 Score:");
        getContentPane().add(player2Score);
        player2Score.setBounds(860, 160, 120, 110);

        endButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        endButton.setText("Quit");
        endButton.setToolTipText("Quits the game when clicked");
        endButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        endButton.setFocusable(false);
        endButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                endButtonMouseClicked(evt);
            }
        });
        getContentPane().add(endButton);
        endButton.setBounds(870, 680, 60, 40);

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setBackground(java.awt.Color.white);
        label1.setText("UP [i], DOWN [k]");
        getContentPane().add(label1);
        label1.setBounds(860, 280, 120, 70);

        label2.setAlignment(java.awt.Label.CENTER);
        label2.setBackground(java.awt.Color.white);
        label2.setText("UP [w], DOWN [s]");
        getContentPane().add(label2);
        label2.setBounds(0, 280, 150, 70);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Start game by pressing spacebar when ball is not moving (speed = 0)
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        if (evt.getKeyChar() == ' ' && !endGame) {
            ballSpeed = 3;
            startText.setText("");
        }
        
        switch(evt.getKeyChar()) {
            //Player 1 Inputs
            case 'w':
                p1Paddle = PaddleDir.UP;
                break;
            case 's':
                p1Paddle = PaddleDir.DOWN;
                break;
            //Player 2 Inputs
            case 'i':
                p2Paddle = PaddleDir.UP;
                break;
            case 'k':
                p2Paddle = PaddleDir.DOWN;
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch(evt.getKeyChar()) {
            //Player 1 Inputs
            case 'w':
                p1Paddle = PaddleDir.STOP;
                break;
            case 's':
                p1Paddle = PaddleDir.STOP;
                break;
            //Player 2 Inputs
            case 'i':
                p2Paddle = PaddleDir.STOP;
                break;
            case 'k':
                p2Paddle = PaddleDir.STOP;
                break;
        }
        repaint();
    }//GEN-LAST:event_formKeyReleased

    private void endButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endButtonMouseClicked
        endGame = true;
        startText.setText("See yah!");
        try {
            Thread.sleep(3000);
        } catch (InterruptedException ex) {
            Logger.getLogger(Pjam_Pong.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_endButtonMouseClicked

    //method that makes ball go in random direction after pressing spacebar
    private void randomDirection() {
        int testX = 0, testY = 0;
        if (ballSpeed == 0) {
            testX = (int) (Math.random() * 2) + 1;
            testY = (int) (Math.random() * 2) + 1;
            System.out.println(testX);
            System.out.println(testY);
            if (testX == 1)
                ballGoingDown = false;
            else
                ballGoingDown = true;
            if (testY == 1)
                ballGoingRight = false;
            else
                ballGoingRight = true;
        }
        
    }
    
    //Trying out enums to deal with paddle movement
    public enum PaddleDir {
        UP, DOWN, STOP
    }
    //Moving multiple paddles needs use of keyPressed and keyReleased
    //Method that deals with said idea
    private void paddleMovement() {
        //player 1 movement
        if (p1Paddle == PaddleDir.STOP) {
            paddle1Y = paddle1Y;
        }
        if (p1Paddle == PaddleDir.UP) {
            paddle1Y -= paddleSpeed;
        }
        if (p1Paddle == PaddleDir.DOWN) {
            paddle1Y += paddleSpeed;
        }
        
        //player 2 movement
        if (p2Paddle == PaddleDir.STOP) {
            paddle2Y = paddle2Y;
        }
        if (p2Paddle == PaddleDir.UP) {
            paddle2Y -= paddleSpeed;
        }
        if (p2Paddle == PaddleDir.DOWN) {
            paddle2Y += paddleSpeed;
        }
        
        //limit each paddle to not go offscreen
        if (paddle1Y <= 0)  //player 1
            paddle1Y = 1;
        if (paddle1Y >= yBorder - 60)
            paddle1Y = yBorder-61;    
        
        if (paddle2Y <= 0)//player 2
            paddle2Y = 1;
        if (paddle2Y >= yBorder - 60)
            paddle2Y = yBorder-61;  
        

    }
    
    //Make the pong ball move automatically
    //Uses same idea as clock method
    private void moveBall() {
        Timer pongTimer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                //ball behavior
                if (ballGoingRight)
                    ballx += ballSpeed;
                else
                    ballx -= ballSpeed;
                //if the ball is heading downwards
                if (ballGoingDown)
                    bally += ballSpeed;
                else
                    bally -= ballSpeed;
                //set "borders" to tell ball to bounce up and down (+15 for fine tuning probably due to borders)
                if (bally >= yBorder) {
                    ballGoingDown = false;
                }
                if (bally <= 0) {
                    ballGoingDown = true;
                }
                
                //set ball to "bounce" off paddles
                if (ballx <= paddle1X+15 && ballx >= paddle1X) { //player 1
                    if (bally >= paddle1Y-10 && bally <= paddle1Y+75)
                        ballGoingRight = true;
                }
                if (ballx >= paddle2X -15 && ballx <= paddle2X + 15) { //player 2
                    if (bally >= paddle2Y-10 && bally <= paddle2Y+75)
                        ballGoingRight = false;  
                }
                        //Scoring stuff
                if (ballx <= paddle1X - 50) { //if player 2 scores (player 1 could not bounce ball back)
                    p2Score += 10;
                    startText.setText("Player 2 Scores!");
                    score2.setText(p2Score + "");
                    ballx = pongScreen.getWidth()/2;
                    bally = pongScreen.getHeight()/2;
                    ballSpeed = 0;
                    if (p2Score >= 100) {
                        startText.setText("Game Over! Player 2 WINS!!!");
                        endGame = true;
                    }
                }
                if (ballx >= xBorder) { //if player 1 scores (player 2 could not bounce ball back)
                    p1Score += 10;
                    score1.setText(p1Score + "");
                    startText.setText("Player 1 Scores!");
                    ballx = pongScreen.getWidth()/2;
                    bally = pongScreen.getHeight()/2; 
                    ballSpeed = 0;
                    if (p1Score >= 100) {
                        startText.setText("Game Over! Player 1 WINS!!!");
                        endGame = true;
                    }
                }
                //If game is over, run gameOver method
                if (endGame)
                    gameOver();
                paddleMovement();
                repaint();
            }
        });
        pongTimer.start();
    }
    
    //method to handle end game things
    private void gameOver() {
        ballx = pongScreen.getWidth()/2;
        bally = pongScreen.getHeight()/2; 
        try {
            Thread.sleep(3000);
        } catch (InterruptedException ex) {
            Logger.getLogger(Pjam_Pong.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }
    
    private void startClock() {
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                String dateTime = new Date().toString();
                
                clockLabel.setText(dateTime);
                
            }
        });
        timer.start();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pjam_Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pjam_Pong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label clockLabel;
    private javax.swing.JButton endButton;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label player1Score;
    private java.awt.Label player2Score;
    private javax.swing.JPanel pongScreen;
    private java.awt.Label pongTitle;
    private java.awt.Label score1;
    private javax.swing.JLabel score2;
    private java.awt.Label startText;
    // End of variables declaration//GEN-END:variables
}


